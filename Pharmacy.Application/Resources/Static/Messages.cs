using Pharmacy.Application.Helper;

namespace Pharmacy.Application.Resources.Static;

public class Messages
{
    public static string SomethingWentWrong => CultureHelper.GetResource(nameof(Messages), nameof(SomethingWentWrong));
    public static string IncorrectPassword => CultureHelper.GetResource(nameof(Messages), nameof(IncorrectPassword));
    public static string YourAccountIsDeactivated => CultureHelper.GetResource(nameof(Messages), nameof(YourAccountIsDeactivated));
    public static string UserNotFound => CultureHelper.GetResource(nameof(Messages), nameof(UserNotFound));
    public static string FullNameIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(FullNameIsRequired));
    public static string PasswordIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(PasswordIsRequired));
    public static string InvalidPassword => CultureHelper.GetResource(nameof(Messages), nameof(InvalidPassword));
    public static string UserNameIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(UserNameIsRequired));
    public static string UserNameIsTooLong => CultureHelper.GetResource(nameof(Messages), nameof(UserNameIsTooLong));
    public static string UserNameAlreadyExists => CultureHelper.GetResource(nameof(Messages), nameof(UserNameAlreadyExists));
    public static string InvalidEmail => CultureHelper.GetResource(nameof(Messages), nameof(InvalidEmail));
    public static string EmailIsTooLong => CultureHelper.GetResource(nameof(Messages), nameof(EmailIsTooLong));
    public static string EmailAlreadyExists => CultureHelper.GetResource(nameof(Messages), nameof(EmailAlreadyExists));
    public static string PhoneNumberIsTooLong => CultureHelper.GetResource(nameof(Messages), nameof(PhoneNumberIsTooLong));
    public static string RoleIdIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(RoleIdIsRequired));
    public static string InvalidDateOfBirth => CultureHelper.GetResource(nameof(Messages), nameof(InvalidDateOfBirth));
    public static string RoleNotFound => CultureHelper.GetResource(nameof(Messages), nameof(RoleNotFound));
    public static string AccountCreatedSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(AccountCreatedSuccessfully));
    public static string AccountUpdatedSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(AccountUpdatedSuccessfully));
    public static string RoleCreatedSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(RoleCreatedSuccessfully));
    public static string RoleUpdatedSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(RoleUpdatedSuccessfully));
    public static string RoleNameIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(RoleNameIsRequired));
    public static string RoleNameAlreadyExists => CultureHelper.GetResource(nameof(Messages), nameof(RoleNameAlreadyExists));
    public static string PasswordResetSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(PasswordResetSuccessfully));
    public static string NewPasswordMustBeDifferent => CultureHelper.GetResource(nameof(Messages), nameof(NewPasswordMustBeDifferent));
    public static string SuccessfullyCreated => CultureHelper.GetResource(nameof(Messages), nameof(SuccessfullyCreated));
    public static string NameIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(NameIsRequired));
    public static string NameIsTooLong => CultureHelper.GetResource(nameof(Messages), nameof(NameIsTooLong));
    public static string DescriptionIsTooLong => CultureHelper.GetResource(nameof(Messages), nameof(DescriptionIsTooLong));
    public static string NameAlreadyExists => CultureHelper.GetResource(nameof(Messages), nameof(NameAlreadyExists));
    public static string CategoryIdRequired => CultureHelper.GetResource(nameof(Messages), nameof(CategoryIdRequired));
    public static string CategoryDoesNotExist => CultureHelper.GetResource(nameof(Messages), nameof(CategoryDoesNotExist));
    public static string SymptomDoesNotExist => CultureHelper.GetResource(nameof(Messages), nameof(SymptomDoesNotExist));
    public static string DiseaseCategoryNotFound => CultureHelper.GetResource(nameof(Messages), nameof(DiseaseCategoryNotFound));
    public static string IdIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(IdIsRequired));
    public static string NotFound => CultureHelper.GetResource(nameof(Messages), nameof(NotFound));
    public static string SuccessfullyUpdated => CultureHelper.GetResource(nameof(Messages), nameof(SuccessfullyUpdated));
    public static string DiseaseNotFound => CultureHelper.GetResource(nameof(Messages), nameof(DiseaseNotFound));
    public static string SideEffectNotFound => CultureHelper.GetResource(nameof(Messages), nameof(SideEffectNotFound));
    public static string SymptomNotFound => CultureHelper.GetResource(nameof(Messages), nameof(SymptomNotFound));
    public static string DosageFormNotFound => CultureHelper.GetResource(nameof(Messages), nameof(DosageFormNotFound));
    public static string ManufacturerNotFound => CultureHelper.GetResource(nameof(Messages), nameof(ManufacturerNotFound));
    public static string UnitNotFound => CultureHelper.GetResource(nameof(Messages), nameof(UnitNotFound));
    public static string FoodNotFound => CultureHelper.GetResource(nameof(Messages), nameof(FoodNotFound));
    public static string UseNotFound => CultureHelper.GetResource(nameof(Messages), nameof(UseNotFound));
    public static string UseDoesNotExist => CultureHelper.GetResource(nameof(Messages), nameof(UseDoesNotExist));
    public static string EffectiveMaterialNotFound => CultureHelper.GetResource(nameof(Messages), nameof(EffectiveMaterialNotFound));
    public static string EffectiveMaterialCategoryNotFound => CultureHelper.GetResource(nameof(Messages), nameof(EffectiveMaterialCategoryNotFound));
    public static string DrugInteractionDuplicate => CultureHelper.GetResource(nameof(Messages), nameof(DrugInteractionDuplicate));
    public static string DrugInteractionCrossSellingConflict => CultureHelper.GetResource(nameof(Messages), nameof(DrugInteractionCrossSellingConflict));
    public static string RelationExists => CultureHelper.GetResource(nameof(Messages), nameof(RelationExists));
    public static string DeletedSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(DeletedSuccessfully));
    public static string ParentCategoryDoesNotExist => CultureHelper.GetResource(nameof(Messages), nameof(ParentCategoryDoesNotExist));
    public static string CircularReferenceDetected => CultureHelper.GetResource(nameof(Messages), nameof(CircularReferenceDetected));
    public static string MedicineCategoryNotFound => CultureHelper.GetResource(nameof(Messages), nameof(MedicineCategoryNotFound));
    public static string MedicineNotFound => CultureHelper.GetResource(nameof(Messages), nameof(MedicineNotFound));
    public static string DefaultSellingUnitMustBeOneOfAllowedSellingUnits => CultureHelper.GetResource(nameof(Messages), nameof(DefaultSellingUnitMustBeOneOfAllowedSellingUnits));
    public static string QuantityForCalcUnitMustBeGreaterThanZero => CultureHelper.GetResource(nameof(Messages), nameof(QuantityForCalcUnitMustBeGreaterThanZero));
    public static string InvalidSupplierType => CultureHelper.GetResource(nameof(Messages), nameof(InvalidSupplierType));
    public static string ContactNameIsRequiredForEachContact => CultureHelper.GetResource(nameof(Messages), nameof(ContactNameIsRequiredForEachContact));
    public static string PhoneNumberIsRequiredForEachContact => CultureHelper.GetResource(nameof(Messages), nameof(PhoneNumberIsRequiredForEachContact));
    public static string SupplierIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(SupplierIsRequired));
    public static string SupplierDoesNotExist => CultureHelper.GetResource(nameof(Messages), nameof(SupplierDoesNotExist));
    public static string OrderDateIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(OrderDateIsRequired));
    public static string QuantityMustBeGreaterThanZero => CultureHelper.GetResource(nameof(Messages), nameof(QuantityMustBeGreaterThanZero));
    public static string MedicineUnitNotFound => CultureHelper.GetResource(nameof(Messages), nameof(MedicineUnitNotFound));
    public static string PublicSellingPriceMustBeGreaterThanZero => CultureHelper.GetResource(nameof(Messages), nameof(PublicSellingPriceMustBeGreaterThanZero));
    public static string TaxPercentageMustBeGreaterThanOrEqualToZero => CultureHelper.GetResource(nameof(Messages), nameof(TaxPercentageMustBeGreaterThanOrEqualToZero));
    public static string ExpiryDateRequired => CultureHelper.GetResource(nameof(Messages), nameof(ExpiryDateRequired));
    public static string InvoiceNumberIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceNumberIsRequired));
    public static string InvoiceDateIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceDateIsRequired));
    public static string PaymentStatusInvalid => CultureHelper.GetResource(nameof(Messages), nameof(PaymentStatusInvalid));
    public static string PaymentDateIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(PaymentDateIsRequired));
    public static string PaymentMethodIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(PaymentMethodIsRequired));
    public static string InvoiceItemsRequired => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceItemsRequired));
    public static string InvoiceNumberAlreadyExists => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceNumberAlreadyExists));
    public static string SupplierInvoiceNotFound => CultureHelper.GetResource(nameof(Messages), nameof(SupplierInvoiceNotFound));
    public static string ExpiryDateIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(ExpiryDateIsRequired));
    public static string SellingPriceMustBeGreaterThanZero => CultureHelper.GetResource(nameof(Messages), nameof(SellingPriceMustBeGreaterThanZero));
    public static string InvoiceIdIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceIdIsRequired));
    public static string ReviewedItemsRequired => CultureHelper.GetResource(nameof(Messages), nameof(ReviewedItemsRequired));
    public static string InvoiceItemIdIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceItemIdIsRequired));
    public static string AlreadyReviewed => CultureHelper.GetResource(nameof(Messages), nameof(AlreadyReviewed));
    public static string ReviewedSuccessfully => CultureHelper.GetResource(nameof(Messages), nameof(ReviewedSuccessfully));
    public static string ReturnReferenceNumberIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(ReturnReferenceNumberIsRequired));
    public static string ReturnStatusNotAvailable => CultureHelper.GetResource(nameof(Messages), nameof(ReturnStatusNotAvailable));
    public static string ReturnItemsAreRequired => CultureHelper.GetResource(nameof(Messages), nameof(ReturnItemsAreRequired));
    public static string ReturnAlreadyCompleted => CultureHelper.GetResource(nameof(Messages), nameof(ReturnAlreadyCompleted));
    public static string MedicationStockNotFound => CultureHelper.GetResource(nameof(Messages), nameof(MedicationStockNotFound));
    public static string NoChangesDetected => CultureHelper.GetResource(nameof(Messages), nameof(NoChangesDetected));
    public static string BarcodeRequired => CultureHelper.GetResource(nameof(Messages), nameof(BarcodeRequired));
    public static string DrugInteractionMedicineConflict => CultureHelper.GetResource(nameof(Messages), nameof(DrugInteractionMedicineConflict));
    public static string CustomerNotFound => CultureHelper.GetResource(nameof(Messages), nameof(CustomerNotFound));
    public static string CityRequired => CultureHelper.GetResource(nameof(Messages), nameof(CityRequired));
    public static string StreetNameRequired => CultureHelper.GetResource(nameof(Messages), nameof(StreetNameRequired));
    public static string NearExpiryMedicinesRetrieved => CultureHelper.GetResource(nameof(Messages), nameof(NearExpiryMedicinesRetrieved));
    public static string NoNearExpiryMedicinesFound => CultureHelper.GetResource(nameof(Messages), nameof(NoNearExpiryMedicinesFound));
    public static string ReorderPointMustBeGreaterThanZero => CultureHelper.GetResource(nameof(Messages), nameof(ReorderPointMustBeGreaterThanZero));
    public static string InvalidWalletType => CultureHelper.GetResource(nameof(Messages), nameof(InvalidWalletType));
    public static string InvalidDeductionType => CultureHelper.GetResource(nameof(Messages), nameof(InvalidDeductionType));
    public static string WalletIdRequired => CultureHelper.GetResource(nameof(Messages), nameof(WalletIdRequired));
    public static string OpeningBalanceMustBeGreaterThanOrEqualToZero => CultureHelper.GetResource(nameof(Messages), nameof(OpeningBalanceMustBeGreaterThanOrEqualToZero));
    public static string WalletNotFound => CultureHelper.GetResource(nameof(Messages), nameof(WalletNotFound));
    public static string ShiftIdRequired => CultureHelper.GetResource(nameof(Messages), nameof(ShiftIdRequired));
    public static string ShiftNotFound => CultureHelper.GetResource(nameof(Messages), nameof(ShiftNotFound));
    public static string ActualClosingBalanceMustBeGreaterThanOrEqualToZero => CultureHelper.GetResource(nameof(Messages), nameof(ActualClosingBalanceMustBeGreaterThanOrEqualToZero));
    public static string ShiftSuccessfullyClosed => CultureHelper.GetResource(nameof(Messages), nameof(ShiftSuccessfullyClosed));
    public static string AtLeastOneWalletRequired => CultureHelper.GetResource(nameof(Messages), nameof(AtLeastOneWalletRequired));
    public static string WalletAlreadyInOpenShift => CultureHelper.GetResource(nameof(Messages), nameof(WalletAlreadyInOpenShift));
    public static string DefaultWalletAlreadyExists => CultureHelper.GetResource(nameof(Messages), nameof(DefaultWalletAlreadyExists));
    public static string ShiftAlreadyClosed => CultureHelper.GetResource(nameof(Messages), nameof(ShiftAlreadyClosed));
    public static string WalletNotFoundInThisShift => CultureHelper.GetResource(nameof(Messages), nameof(WalletNotFoundInThisShift));
    public static string ExpenseCategoryNotFound => CultureHelper.GetResource(nameof(Messages), nameof(ExpenseCategoryNotFound));
    public static string ChangeExpenseCategoryActivation => CultureHelper.GetResource(nameof(Messages), nameof(ChangeExpenseCategoryActivation));
    public static string CreateCashExpenseSuccess => CultureHelper.GetResource(nameof(Messages), nameof(CreateCashExpenseSuccess));
    public static string AmountMustBeGreaterThanZero => CultureHelper.GetResource(nameof(Messages), nameof(AmountMustBeGreaterThanZero));
    public static string ExpenseCategoryIdRequired => CultureHelper.GetResource(nameof(Messages), nameof(ExpenseCategoryIdRequired));
    public static string ShiftWalletDoesNotExist => CultureHelper.GetResource(nameof(Messages), nameof(ShiftWalletDoesNotExist));
    public static string MedicineNotLatestToExpire => CultureHelper.GetResource(nameof(Messages), nameof(MedicineNotLatestToExpire));
    public static string PrescriptionConflictDetected => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionConflictDetected));
    public static string PrescriptionConflictFree => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionConflictFree));
    public static string RequiredOpenShift => CultureHelper.GetResource(nameof(Messages), nameof(RequiredOpenShift));
    public static string PaymentExceedsRemainingBalance => CultureHelper.GetResource(nameof(Messages), nameof(PaymentExceedsRemainingBalance));
    public static string InvoiceMustBeReceivedFirst => CultureHelper.GetResource(nameof(Messages), nameof(InvoiceMustBeReceivedFirst));
    public static string PaymentInfoRequired => CultureHelper.GetResource(nameof(Messages), nameof(PaymentInfoRequired));
    public static string WaitingForInvoiceDetails => CultureHelper.GetResource(nameof(Messages), nameof(WaitingForInvoiceDetails));
    public static string QuantityExceedsAvailableStock => CultureHelper.GetResource(nameof(Messages), nameof(QuantityExceedsAvailableStock));
    public static string PrescriptionNotFound => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionNotFound));
    public static string PrescriptionIdRequierd => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionIdRequierd));
    public static string CashbackSystemDisabled => CultureHelper.GetResource(nameof(Messages), nameof(CashbackSystemDisabled));
    public static string CashbackNotApplicableForLowAmount => CultureHelper.GetResource(nameof(Messages), nameof(CashbackNotApplicableForLowAmount));
    public static string CashbackPercentageNonNegative =>  CultureHelper.GetResource(nameof(Messages), nameof(CashbackPercentageNonNegative));
    public static string MinCashbackNonNegative =>  CultureHelper.GetResource(nameof(Messages), nameof(MinCashbackNonNegative));
    public static string MaxCashbackMustBeGreaterThanMin => CultureHelper.GetResource(nameof(Messages), nameof(MaxCashbackMustBeGreaterThanMin));
    public static string ModuleNotFound => CultureHelper.GetResource(nameof(Messages), nameof(ModuleNotFound));
    public static string ValueIsRequired => CultureHelper.GetResource(nameof(Messages), nameof(ValueIsRequired));
    public static string SettingNotFound => CultureHelper.GetResource(nameof(Messages), nameof(SettingNotFound));
    public static string ExpectedBoolean => CultureHelper.GetResource(nameof(Messages), nameof(ExpectedBoolean));
    public static string ExpectedDecimal => CultureHelper.GetResource(nameof(Messages), nameof(ExpectedDecimal));
    public static string ExpectedInteger => CultureHelper.GetResource(nameof(Messages), nameof(ExpectedInteger));
    public static string UnsupportedSettingType => CultureHelper.GetResource(nameof(Messages), nameof(UnsupportedSettingType));
    public static string InvalidConversion => CultureHelper.GetResource(nameof(Messages), nameof(InvalidConversion));
    public static string InvalidAmountPaid => CultureHelper.GetResource(nameof(Messages), nameof(InvalidAmountPaid));
    public static string PrescriptionAlreadyPaid => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionAlreadyPaid));
    public static string PrescriptionOverpayment => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionOverpayment));
    public static string DebtExceedsLimit => CultureHelper.GetResource(nameof(Messages), nameof(DebtExceedsLimit));
    public static string OverdueInvoicesExceededGracePeriod => CultureHelper.GetResource(nameof(Messages), nameof(OverdueInvoicesExceededGracePeriod));
    public static string TargetUserIdRequired => CultureHelper.GetResource(nameof(Messages), nameof(TargetUserIdRequired));
    public static string TargetUserNotFound => CultureHelper.GetResource(nameof(Messages), nameof(TargetUserNotFound));
    public static string TargetUserNotOpenShift => CultureHelper.GetResource(nameof(Messages), nameof(TargetUserNotOpenShift));
    public static string PrescriptionTransferredMessage(int invoiceNumber)
    => string.Format(CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionTransferredMessage)), invoiceNumber.ToString());
    public static string PrescriptionTransfered => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionTransfered));
    public static string AmountPaidMustZeroWhenTransferring => CultureHelper.GetResource(nameof(Messages), nameof(AmountPaidMustZeroWhenTransferring));
    public static string CashbackUsedMustZeroWhenTransferring => CultureHelper.GetResource(nameof(Messages), nameof(CashbackUsedMustZeroWhenTransferring));
    public static string CreditUsedMustZeroWhenTransferring => CultureHelper.GetResource(nameof(Messages), nameof(CreditUsedMustZeroWhenTransferring));
    public static string NotAuthorizedToOpenPrescription => CultureHelper.GetResource(nameof(Messages), nameof(NotAuthorizedToOpenPrescription));

    public static string CashbackCannotBeUsedForNonRegisteredCustomers => CultureHelper.GetResource(nameof(Messages), nameof(CashbackCannotBeUsedForNonRegisteredCustomers));
    public static string CreditCannotBeUsedForNonRegisteredCustomers => CultureHelper.GetResource(nameof(Messages), nameof(CreditCannotBeUsedForNonRegisteredCustomers));
    public static string PaymentsRequiredForNonRegisteredCustomers => CultureHelper.GetResource(nameof(Messages), nameof(PaymentsRequiredForNonRegisteredCustomers));
    public static string PaymentsMustEqualTotalCost => CultureHelper.GetResource(nameof(Messages), nameof(PaymentsMustEqualTotalCost));
    public static string PrescriptionItemIdRequired => CultureHelper.GetResource(nameof(Messages), nameof(PaymentsMustEqualTotalCost));

    public static string ItemNotFound => CultureHelper.GetResource(nameof(Messages), nameof(ItemNotFound));
    public static string QuantityExceedsAvailableForReturn => CultureHelper.GetResource(nameof(Messages), nameof(QuantityExceedsAvailableForReturn));
    public static string PartialReturnNotAllowed => CultureHelper.GetResource(nameof(Messages), nameof(PartialReturnNotAllowed));
    public static string PrescriptionItemNotFound => CultureHelper.GetResource(nameof(Messages), nameof(PrescriptionItemNotFound));
}
