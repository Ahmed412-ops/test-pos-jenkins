// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy.Infrastructure.Context;

#nullable disable

namespace Pharmacy.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250409123217_shifttransactions")]
    partial class shifttransactions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pharmacy.Domain.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expires_On")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("User_Id");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FloorNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Landmark")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableContactOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.CustomerChronicDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("CustomerChronicDisease");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.CustomerChronicMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MedicineId");

                    b.ToTable("CustomerChronicMedicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsWhatsApp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiseaseCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseCategoryId");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Diseases", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.DiseaseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("DiseaseCategorys", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.DiseaseSymptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SymptomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("SymptomId");

                    b.ToTable("DiseaseSymptom");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.DosageForm.DosageForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("DosageForms", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlackBoxWarning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientInformation_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientInformation_En")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("EffectiveMaterials", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("EffectiveMaterialCategorys", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCommonUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("UseId");

                    b.ToTable("EffectiveMaterialCommonUse");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCrossSelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrossSellingMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CrossSellingMaterialId");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("EffectiveMaterialCrossSellings", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("EffectiveMaterialId");

                    b.ToTable("EffectiveMaterialDisease");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialDrugInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InteractingMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("InteractingMaterialId");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("EffectiveMaterialDrugInteractions", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("FoodId");

                    b.ToTable("EffectiveMaterialFood");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialOffLabelUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("UseId");

                    b.ToTable("EffectiveMaterialOffLabelUse");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialSideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMajor")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Probability")
                        .HasColumnType("real");

                    b.Property<Guid>("SideEffectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("EffectiveMaterialSideEffect");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Food.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Foods", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationRoles", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date_Of_Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Last_Login")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("ApplicationUsers", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Manufacturers.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Manufacturers", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DosageFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Index"));

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DosageFormId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Medicines", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("MedicineCategorys", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineCrossSelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrossSellingMedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CrossSellingMedicineId");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineCrossSellings", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineEffectiveMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineEffectiveMaterial");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineEffectiveMaterialCrossSelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineEffectiveMaterialCrossSelling");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineEffectiveMaterialInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectiveMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveMaterialId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineEffectiveMaterialInteraction");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CalcUnit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeSold")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityForCalcUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UnitId");

                    b.ToTable("MedicineUnits", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Order.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Order.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineUnitId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Permissions.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SideEffects.SideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("SideEffects", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReturnStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierInvoiceId");

                    b.ToTable("MedicationReturn");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationReturnItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalReasonDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicationReturnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicineUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityToReturn")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReturnReason")
                        .HasColumnType("int");

                    b.Property<decimal>("ReturnValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicationReturnId");

                    b.HasIndex("MedicineUnitId");

                    b.ToTable("MedicationReturnItem");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("GeneratedBarcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicationStocks", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.RecorderPointSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PreferredSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ReorderPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RestockingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineId")
                        .IsUnique();

                    b.HasIndex("PreferredSupplierId");

                    b.ToTable("RecorderPointSettingss", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.StockHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerformedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityChange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReasonForChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<decimal>("UpdatedStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PerformedById");

                    b.ToTable("StockHistorys", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Supplier.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("SupplierId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Supplier.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalInvoiceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceAttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ShippingFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierInvoices", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicineUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PublicSellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReviewedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SupplierDiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("SupplierInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SupplierPurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicineUnitId");

                    b.HasIndex("SupplierInvoiceId");

                    b.ToTable("SupplierInvoiceItems", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierTransaction.SupplierTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("SupplierInvoiceId");

                    b.ToTable("SupplierTransactions", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Symptoms.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Symptoms", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Unit.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Uses.Use", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Uses", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Expense.CashExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpenseDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaidTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShiftWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("ShiftWalletId");

                    b.ToTable("CashExpenses", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Expense.ExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("ExpenseCategorys", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Sales.ShiftSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicationStockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShiftWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("MedicationStockId");

                    b.HasIndex("ShiftWalletId");

                    b.ToTable("ShiftSaless", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClosedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OpenedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClosedById");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("OpenedById");

                    b.ToTable("Shifts", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.ShiftWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualClosingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DifferenceReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.HasIndex("ShiftId");

                    b.HasIndex("WalletId");

                    b.ToTable("ShiftWallets", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Created_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeductionType")
                        .HasColumnType("int");

                    b.Property<decimal?>("DeductionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultForCashPayments")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Modified_By")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Is_Deleted");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.Address", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.CustomerChronicDisease", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("CustomerChronicDiseases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Disease.Disease", "Disease")
                        .WithMany("CustomerChronicDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.CustomerChronicMedicine", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("CustomerChronicMedicines")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("CustomerChronicMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.PhoneNumber", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.Disease", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Disease.DiseaseCategory", "DiseaseCategory")
                        .WithMany("Diseases")
                        .HasForeignKey("DiseaseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseCategory");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.DiseaseSymptom", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Disease.Disease", "Disease")
                        .WithMany("Symptoms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Symptoms.Symptom", "Symptom")
                        .WithMany("Diseases")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCategory", "Category")
                        .WithMany("EffectiveMaterials")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCommonUse", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("CommonUses")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Uses.Use", "Use")
                        .WithMany("EffectiveMaterialCommonUses")
                        .HasForeignKey("UseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCrossSelling", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "CrossSellingMaterial")
                        .WithMany("CS_EffectiveMaterials")
                        .HasForeignKey("CrossSellingMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("EM_CrossSelling")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CrossSellingMaterial");

                    b.Navigation("EffectiveMaterial");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialDisease", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Disease.Disease", "Disease")
                        .WithMany("EffectiveMaterialDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("DiseaseInteraction")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("EffectiveMaterial");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialDrugInteraction", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("EM_DrugInteractions")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "InteractingMaterial")
                        .WithMany("DI_EffectiveMaterials")
                        .HasForeignKey("InteractingMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("InteractingMaterial");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialFood", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("FoodInteractions")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Food.Food", "Food")
                        .WithMany("EffectiveMaterialFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialOffLabelUse", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("OffLabelUses")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Uses.Use", "Use")
                        .WithMany("EffectiveMaterialOffLabelUses")
                        .HasForeignKey("UseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialSideEffect", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("SideEffects")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.SideEffects.SideEffect", "SideEffect")
                        .WithMany("EffectiveMaterialSideEffects")
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("SideEffect");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.Medicine", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.MedicineCategory", "MedicineCategory")
                        .WithMany("Medicines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pharmacy.Domain.Entities.DosageForm.DosageForm", "DosageForm")
                        .WithMany("Medicines")
                        .HasForeignKey("DosageFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany("Medicines")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("Manufacturer");

                    b.Navigation("MedicineCategory");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineCategory", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.MedicineCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineCrossSelling", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "CrossSellingMedicine")
                        .WithMany("CrossSellingRecommendations")
                        .HasForeignKey("CrossSellingMedicineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("RecommendedBy")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CrossSellingMedicine");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineEffectiveMaterial", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("Medicines")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("EffectiveMaterials")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineEffectiveMaterialCrossSelling", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("MedicinesCrossSelling")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("CrossSelling_EM")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineEffectiveMaterialInteraction", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", "EffectiveMaterial")
                        .WithMany("MedicinesDrugInteractions")
                        .HasForeignKey("EffectiveMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("DrugInteractions_EM")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EffectiveMaterial");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineUnit", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("MedicineUnits")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Unit.Unit", "Unit")
                        .WithMany("Medicines")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Order.PurchaseOrder", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Supplier.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Order.PurchaseOrderItem", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.MedicineUnit", "MedicineUnit")
                        .WithMany()
                        .HasForeignKey("MedicineUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Order.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineUnit");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Permissions.RolePermission", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationReturn", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoice", "SupplierInvoice")
                        .WithMany()
                        .HasForeignKey("SupplierInvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supplier");

                    b.Navigation("SupplierInvoice");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationReturnItem", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Stock.MedicationReturn", "MedicationReturn")
                        .WithMany("ReturnItems")
                        .HasForeignKey("MedicationReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Medicine.MedicineUnit", "MedicineUnit")
                        .WithMany()
                        .HasForeignKey("MedicineUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicationReturn");

                    b.Navigation("MedicineUnit");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationStock", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("Stocks")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.RecorderPointSettings", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithOne("ReorderSettings")
                        .HasForeignKey("Pharmacy.Domain.Entities.Stock.RecorderPointSettings", "MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Supplier.Supplier", "PreferredSupplier")
                        .WithMany()
                        .HasForeignKey("PreferredSupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Medicine");

                    b.Navigation("PreferredSupplier");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.StockHistory", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.Medicine", "Medicine")
                        .WithMany("StockHistories")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationUser", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Supplier.Contact", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Supplier.Supplier", "Supplier")
                        .WithMany("Contacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoice", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Order.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pharmacy.Domain.Entities.Supplier.Supplier", "Supplier")
                        .WithMany("SupplierInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoiceItem", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Medicine.MedicineUnit", "MedicineUnit")
                        .WithMany()
                        .HasForeignKey("MedicineUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoice", "SupplierInvoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("SupplierInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineUnit");

                    b.Navigation("SupplierInvoice");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierTransaction.SupplierTransaction", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoice", "SupplierInvoice")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("SupplierInvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SupplierInvoice");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Expense.CashExpense", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Wallets.Expense.ExpenseCategory", "Category")
                        .WithMany("CashExpenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Wallets.ShiftWallet", "ShiftWallet")
                        .WithMany("CashExpenses")
                        .HasForeignKey("ShiftWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ShiftWallet");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Sales.ShiftSales", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("ShiftSales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pharmacy.Domain.Entities.Stock.MedicationStock", "MedicationStock")
                        .WithMany()
                        .HasForeignKey("MedicationStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Wallets.ShiftWallet", "ShiftWallet")
                        .WithMany("ShiftSales")
                        .HasForeignKey("ShiftWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MedicationStock");

                    b.Navigation("ShiftWallet");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Shift", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationUser", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById");

                    b.HasOne("Pharmacy.Domain.Entities.Identity.ApplicationUser", "OpenedBy")
                        .WithMany("Shifts")
                        .HasForeignKey("OpenedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClosedBy");

                    b.Navigation("OpenedBy");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.ShiftWallet", b =>
                {
                    b.HasOne("Pharmacy.Domain.Entities.Wallets.Shift", "Shift")
                        .WithMany("ShiftWallets")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany("ShiftWallets")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerChronicDiseases");

                    b.Navigation("CustomerChronicMedicines");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("ShiftSales");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.Disease", b =>
                {
                    b.Navigation("CustomerChronicDiseases");

                    b.Navigation("EffectiveMaterialDiseases");

                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Disease.DiseaseCategory", b =>
                {
                    b.Navigation("Diseases");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.DosageForm.DosageForm", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterial", b =>
                {
                    b.Navigation("CS_EffectiveMaterials");

                    b.Navigation("CommonUses");

                    b.Navigation("DI_EffectiveMaterials");

                    b.Navigation("DiseaseInteraction");

                    b.Navigation("EM_CrossSelling");

                    b.Navigation("EM_DrugInteractions");

                    b.Navigation("FoodInteractions");

                    b.Navigation("Medicines");

                    b.Navigation("MedicinesCrossSelling");

                    b.Navigation("MedicinesDrugInteractions");

                    b.Navigation("OffLabelUses");

                    b.Navigation("SideEffects");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.EffectiveMaterial.EffectiveMaterialCategory", b =>
                {
                    b.Navigation("EffectiveMaterials");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Food.Food", b =>
                {
                    b.Navigation("EffectiveMaterialFoods");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Shifts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Manufacturers.Manufacturer", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.Medicine", b =>
                {
                    b.Navigation("CrossSellingRecommendations");

                    b.Navigation("CrossSelling_EM");

                    b.Navigation("CustomerChronicMedicines");

                    b.Navigation("DrugInteractions_EM");

                    b.Navigation("EffectiveMaterials");

                    b.Navigation("MedicineUnits");

                    b.Navigation("RecommendedBy");

                    b.Navigation("ReorderSettings");

                    b.Navigation("StockHistories");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Medicine.MedicineCategory", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Order.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SideEffects.SideEffect", b =>
                {
                    b.Navigation("EffectiveMaterialSideEffects");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Stock.MedicationReturn", b =>
                {
                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Supplier.Supplier", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SupplierInvoices");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.SupplierInvoice.SupplierInvoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Symptoms.Symptom", b =>
                {
                    b.Navigation("Diseases");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Unit.Unit", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Uses.Use", b =>
                {
                    b.Navigation("EffectiveMaterialCommonUses");

                    b.Navigation("EffectiveMaterialOffLabelUses");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Expense.ExpenseCategory", b =>
                {
                    b.Navigation("CashExpenses");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Shift", b =>
                {
                    b.Navigation("ShiftWallets");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.ShiftWallet", b =>
                {
                    b.Navigation("CashExpenses");

                    b.Navigation("ShiftSales");
                });

            modelBuilder.Entity("Pharmacy.Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Navigation("ShiftWallets");
                });
#pragma warning restore 612, 618
        }
    }
}
